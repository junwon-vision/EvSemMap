import argparse, os, json
MODEL_TYPE = ['vanilla', 'evidential']
PHASE_CHOICES = ['train', 'val', 'test', 'prep']
_DATASET_CHOICE = [
    ('rugd', ['train', 'test', 'val']),
    ('rellis', ['0', '1', '2', '3', '4', '-0', '-1', '-2', '-3', '-4']),
]
DATASET_CHOICES = [f"{dataset}_{item}" for dataset, items in _DATASET_CHOICE for item in items]
REMAP_CHOICES = [-1, 3]
NOT_SPECIFIED = "$NONE$"

### Administrational Jobs ###################
def folder_check_and_create(dir):
    '''
        If ${dir} is not exists, make the directory recursively.
    '''
    if not os.path.isdir(dir) :
        os.makedirs(dir)

def folder_check_and_config_save(args):
    '''
        Check Args' Validity:
            if phase is not train, the model should be specified.
            if the model is specified, it should be the valid file.
            check_and_create out_model_dir, out_img_dir
        if phase is train, save the config to "config.txt"
    '''
    out_model_dir = os.path.join(args.log_dir, args.remark)
    out_img_dir = os.path.join(args.log_dir, args.remark, 'images')

    folder_check_and_create(out_img_dir) # recursive makedirs => out_model_dir should be generated by this line.
    
    if not args.phase.startswith('train'):
        assert args.load != NOT_SPECIFIED
    else:
        out_config_dir = os.path.join(out_model_dir, 'config.txt')
        with open(out_config_dir, 'w') as con :
            json.dump(args.__dict__, con, indent=2)
    
    if args.load != NOT_SPECIFIED and (not os.path.isfile(args.load)):
        raise Exception(f"There is no model @ {args.load}")
    
    print(args)
    return out_model_dir, out_img_dir
#############################################

def prepare_argparser():
    parser = argparse.ArgumentParser(description='Hyperparams')
    parser.add_argument('--n_epoch', nargs='?', type=int, default=100,
                        help='# of the epochs')
    parser.add_argument('--batch_size', nargs='?', type=int, default=4, 
                        help='Batch Size')
    parser.add_argument('--l_rate', nargs='?', type=float, default=1e-5,
                        help='Learning Rate')
    parser.add_argument('--save_freq', nargs='?', type=int, default=10,
                        help='frequency for saving model')
    parser.add_argument('--log_dir', type=str, default='./ckpts')
    
    # My Own Params #####################################################################
    parser.add_argument('--remark', type=str, required=True,
                        help='title of this work')
    parser.add_argument('--model', choices=MODEL_TYPE, required=True,
                        help='which model?')
    parser.add_argument('--phase', choices=PHASE_CHOICES, required=True,
                        help='train, val, test')
    parser.add_argument('--dataset', choices=DATASET_CHOICES, required=True,
                        help='which dataset is used for training: [rugd, rellis]')
    parser.add_argument('--cross_inference', choices=DATASET_CHOICES, nargs='?', default=NOT_SPECIFIED,
                        help='if you want to perform inference in other dataset(which is not used during training).')
    parser.add_argument('--load', type=str, default=NOT_SPECIFIED,
                        help='')
    parser.add_argument('--partial_val', type=int, default=None,
                        help='only {partial_val} images would be validated')
    
    parser.add_argument('--evd_type', type=str, choices=['edl', 'iedl', 'dedl'])
    parser.add_argument('--unc_act', type=str, choices=['relu', 'softplus', 'exp'])
    # parser.add_argument('--unc_type', type=str, choices=['mse', 'digamma', 'log']) mse's performance is bad according to RED paper.
    parser.add_argument('--unc_type', type=str, choices=['digamma', 'log'])
    parser.add_argument('--kl_strength', type=float, default=0.1)
    parser.add_argument('--ohem', type=float, default=-1.0)

    parser.add_argument('--with_void', type=str, default="False")
    parser.add_argument('--prep_only_vis', type=str, default="False")
    
    parser.add_argument('--remap_version', type=int, choices=REMAP_CHOICES, default=3)

    #####################################################################################
    args = parser.parse_args()

    # Additional Processing
    args.with_void = (args.with_void.lower() == "true") # whether consider the void class during training
    args.prep_only_vis = (args.prep_only_vis.lower() == "true") # whether consider the void class during training
    
    # Organized Dataset Specification @ 24.07.01
    if args.dataset.find('_') > 0:
        args.data_subset = args.dataset.split('_')[1]
        args.dataset    = args.dataset.split('_')[0]
    else:
        args.data_subset = None

    if args.cross_inference != NOT_SPECIFIED and args.cross_inference.find('_') > 0:
        args.cross_subset    = args.cross_inference.split('_')[1]
        args.cross_inference = args.cross_inference.split('_')[0]
    return args